#!/usr/bin/python
# -*- tab-width: 4; use-tabs: 1; coding: utf-8 -*-
# vim:tabstop=4:noexpandtab:
"""
A Basic bot that mumbles on command
"""
from twisted.words.protocols import irc
from twisted.internet import reactor, protocol, task
from mumblr.data import WordDB
from time import time
from random import SystemRandom
import re

words = WordDB()
rnd = SystemRandom()

# Load data
words.load_linefile(open('data.mumble'))
words.learnfile = open('data.mumble', 'a')

def mumble(start=True):
	return words.genline(start=start)

def waittime():
#	m = rnd.gauss(60, 10)
	m = rnd.betavariate(2,2)*2*30
#	m = rnd.triangle(50,70)
	print "Wait %s minutes" % m
	return m * 60

class MumblrBot(irc.IRCClient):
	"""
	A bot the mumbles on command.
	"""
	
	def signedOn(self):
		"""Called when bot has succesfully signed on to server."""
		self.channelact = {}
		self.clock = task.Clock()
		self.channelclocks = {}
		self.msg('nickserv', 'IDENTIFY %s %s' % (self.factory.config.nick, self.factory.config.nickpass))
		for c in self.factory.config.channels:
			self.join(c)
		en = re.escape(self.nickname)
		self.WHOAMI = re.compile(en+r'[:,]? who are you\??|who is '+en+r'\??', re.I)
		print self.WHOAMI.pattern
	
	def mumbleLater(self, channel, time=None):
		if time is None:
			time = waittime()
		return reactor.callLater(waittime(), self.mumbleabit, channel)
	
	def joined(self, channel):
		"""This will get called when the bot joins the channel."""
		print "Joined", channel
		self.channelact[channel] = time()
		self.channelclocks[channel] = self.mumbleLater(channel)

	def privmsg(self, user, channel, msg):
		"""This will get called when the bot receives a message."""
		user = user.split('!', 1)[0]
	
		# Check to see if they're sending me a private message
		print repr(msg)
		if self.WHOAMI.search(msg):
			print "WHOAMI in", channel
			rply = 'I am '+mumble('am')
			self.msg(channel, rply)
		elif channel == self.nickname:
			self.msg(user, mumble())
		elif msg[0] not in '.|@!': #Not a bot command
			words.add_line(msg)
		if channel in self.channelact:
			self.channelact[channel] = time()
			self.channelclocks[channel].reset(waittime())
	
	def action(self, user, channel, msg):
		"""This will get called when the bot sees someone do an action."""
		if channel in self.channelact:
			self.channelact[channel] = time()
			self.channelclocks[channel].reset(waittime())
	
	def mumbleabit(self, channel):
		print "Mumbling in %s" % channel
		act = self.channelact[channel]
		self.msg(channel, mumble())
		self.channelclocks[channel] = self.mumbleLater(channel)

class MumblrBotFactory(protocol.ClientFactory):
	"""A factory for CommandBots.

	A new protocol instance will be created each time we connect to the server.
	"""
	
	# the class of the protocol to build when new connection is made
	protocol = MumblrBot
	
	def __init__(self, config):
		self.config = config
	
	def clientConnectionLost(self, connector, reason):
		"""If we get disconnected, reconnect to server."""
		connector.connect()
	
	def clientConnectionFailed(self, connector, reason):
		print "connection failed:", reason
		reactor.stop()


if __name__ == '__main__':
	# create factory protocol and application
	import config
	MumblrBot.nickname = config.nick
	f = MumblrBotFactory(config)
	
	# connect factory to this host and port
	reactor.connectTCP("irc.freenode.net", 6667, f)
	
	# run bot
	reactor.run()

